on:
  push:
    branches: [main, stage, dev]

env:
  API_AUTH_URL_PROD: ${{ secrets.API_AUTH_URL_PROD }}
  API_AUTH_URL_DEV: ${{ secrets.API_AUTH_URL_DEV }}
  API_AUTH_URL_STAGE: ${{ secrets.API_AUTH_URL_STAGE }}
  API_AUTH_URL_TEST: ${{ secrets.API_AUTH_URL_TEST }}
  API_REFERENCE_URL_PROD: ${{ secrets.API_REFERENCE_URL_PROD }}
  API_REFERENCE_URL_DEV: ${{ secrets.API_REFERENCE_URL_DEV }}
  API_REFERENCE_URL_STAGE: ${{ secrets.API_REFERENCE_URL_STAGE }}
  API_REFERENCE_URL_TEST: ${{ secrets.API_REFERENCE_URL_TEST }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract branch name
        run: echo "branch=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Set API URL
        id: set-urls
        run: |
          echo "Branch: $branch"
          if [ "$branch" = "main" ]; then
            echo "api_auth_url=${API_AUTH_URL_PROD}" >> $GITHUB_OUTPUT
            echo "api_reference_url=${API_REFERENCE_URL_PROD}" >> $GITHUB_OUTPUT
          elif [ "$branch" = "dev" ]; then
            echo "api_auth_url=${API_AUTH_URL_DEV}" >> $GITHUB_OUTPUT
            echo "api_reference_url=${API_REFERENCE_URL_DEV}" >> $GITHUB_OUTPUT
          elif [ "$branch" = "stage" ]; then
            echo "api_auth_url=${API_AUTH_URL_STAGE}" >> $GITHUB_OUTPUT
            echo "api_reference_url=${API_REFERENCE_URL_STAGE}" >> $GITHUB_OUTPUT
          else
            echo "api_auth_url=${API_AUTH_URL_TEST}" >> $GITHUB_OUTPUT
            echo "api_reference_url=${API_REFERENCE_URL_TEST}" >> $GITHUB_OUTPUT
          fi

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/admin-panel:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/admin-panel:cache
          cache-to: type=inline
          build-args: |
            REACT_APP_AUTH_API_URL=${{ steps.set-urls.outputs.api_auth_url }}
            REACT_APP_REFERENCE_API_URL=${{ steps.set-urls.outputs.api_reference_url }}
            REACT_APP_ID=${{ secrets.APP }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Determine deploy path
        run: |
          echo "DEPLOY_TAG=${GITHUB_SHA}" >> $GITHUB_ENV
          BRANCH="${GITHUB_REF##*/}"
          case "$BRANCH" in
            main) echo "DEPLOY_PATH=apps/admin-panel" >> $GITHUB_ENV ;;
            dev) echo "DEPLOY_PATH=apps/admin-panel-dev" >> $GITHUB_ENV ;;
            stage) echo "DEPLOY_PATH=apps/admin-panel-stage" >> $GITHUB_ENV ;;
            *) echo "Unknown branch $BRANCH"; exit 1 ;;
          esac

      - name: Deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << EOF
            export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            export DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
            export DEPLOY_TAG=${DEPLOY_TAG}

            cd $DEPLOY_PATH  exit 1

            echo "\$DOCKERHUB_TOKEN" | docker login -u "\$DOCKERHUB_USERNAME" --password-stdin

            docker pull \$DOCKERHUB_USERNAME/admin-panel:\$DEPLOY_TAG

            if [ ! -f .env ]; then touch .env; fi
            grep -q "^TAG=" .env && sed -i "s/^TAG=.*/TAG=\$DEPLOY_TAG/" .env  echo "TAG=\$DEPLOY_TAG" >> .env

            docker compose pull --quiet --ignore-pull-failures
            docker compose up -d --remove-orphans
          EOF

  notify:
    runs-on: ubuntu-latest
    name: üì¨ Telegram Notify
    needs: [build-and-push, deploy]
    if: always()
    steps:
      - name: Telegram Notify
        run: |
          STATUS="${{ needs.deploy.result }}"
          COMMIT="${{ github.event.head_commit.message }}"
          REF="${{ github.ref_name }}"
          SHA="${{ github.sha }}"
          AUTHOR="${{ github.event.head_commit.author.name }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if [ "$STATUS" != "success" ]; then
            TEXT="üõë *–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è*\n\n"
          else
            TEXT="‚úÖ *–î–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω*\n\n"
          fi

          TEXT+="üì¶ *–í–µ—Ç–∫–∞:* \`$REF\`\n"
          TEXT+="üîñ *–¢–µ–≥:* \`$SHA\`\n"
          TEXT+="üë§ *–ê–≤—Ç–æ—Ä:* [$AUTHOR](https://github.com/$AUTHOR)\n"
          TEXT+="üìù *–ö–æ–º–º–∏—Ç:* $COMMIT\n"
          TEXT+="[üîç –õ–æ–≥–∏ –≤ Actions]($RUN_URL)"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode=Markdown \
            -d "text=$TEXT"
